// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: ectry.sql

package db

import (
	"context"
)

const createEctry = `-- name: CreateEctry :one
INSERT INTO ectries (
    account_id,
    amount
   ) VALUES (
      $1, $2
     ) RETURNING id, account_id, amount, created_at
`

type CreateEctryParams struct {
	AccountID int64   `json:"account_id"`
	Amount    float64 `json:"amount"`
}

func (q *Queries) CreateEctry(ctx context.Context, arg CreateEctryParams) (Ectry, error) {
	row := q.db.QueryRow(ctx, createEctry, arg.AccountID, arg.Amount)
	var i Ectry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEctry = `-- name: DeleteEctry :exec
DELETE FROM ectries WHERE id = $1
`

func (q *Queries) DeleteEctry(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteEctry, id)
	return err
}

const getEctry = `-- name: GetEctry :one
SELECT id, account_id, amount, created_at FROM ectries WHERE id= $1 LIMIT 1
`

func (q *Queries) GetEctry(ctx context.Context, id int64) (Ectry, error) {
	row := q.db.QueryRow(ctx, getEctry, id)
	var i Ectry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listEctryWithAccountID = `-- name: ListEctryWithAccountID :many
SELECT id, account_id, amount, created_at FROM ectries WHERE account_id=$1 ORDER BY id LIMIT $2 OFFSET $3
`

type ListEctryWithAccountIDParams struct {
	AccountID int64 `json:"account_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListEctryWithAccountID(ctx context.Context, arg ListEctryWithAccountIDParams) ([]Ectry, error) {
	rows, err := q.db.Query(ctx, listEctryWithAccountID, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ectry
	for rows.Next() {
		var i Ectry
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEctryWithID = `-- name: ListEctryWithID :many
SELECT id, account_id, amount, created_at FROM ectries ORDER BY id LIMIT $1 OFFSET $2
`

type ListEctryWithIDParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEctryWithID(ctx context.Context, arg ListEctryWithIDParams) ([]Ectry, error) {
	rows, err := q.db.Query(ctx, listEctryWithID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ectry
	for rows.Next() {
		var i Ectry
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEctry = `-- name: UpdateEctry :one
UPDATE ectries SET amount = $2 WHERE id = $1 RETURNING id, account_id, amount, created_at
`

type UpdateEctryParams struct {
	ID     int64   `json:"id"`
	Amount float64 `json:"amount"`
}

func (q *Queries) UpdateEctry(ctx context.Context, arg UpdateEctryParams) (Ectry, error) {
	row := q.db.QueryRow(ctx, updateEctry, arg.ID, arg.Amount)
	var i Ectry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
